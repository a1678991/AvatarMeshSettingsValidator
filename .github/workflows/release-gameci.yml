name: Build UnityPackage with GameCI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build UnityPackage
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-2022.3.22f1-base-3.1.0
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: UnityProject/Library
        key: Library-build
        restore-keys: |
          Library-
    
    - name: Prepare Unity project
      run: |
        # Create Unity project structure
        mkdir -p UnityProject/Assets/AvatarMeshSettingsValidator
        mkdir -p UnityProject/ProjectSettings
        mkdir -p Export
        
        # Copy package files
        cp -r Editor UnityProject/Assets/AvatarMeshSettingsValidator/
        cp -r Documentation UnityProject/Assets/AvatarMeshSettingsValidator/ 2>/dev/null || true
        cp README.md UnityProject/Assets/AvatarMeshSettingsValidator/
        cp CHANGELOG.md UnityProject/Assets/AvatarMeshSettingsValidator/
        cp LICENSE UnityProject/Assets/AvatarMeshSettingsValidator/
        cp package.json UnityProject/Assets/AvatarMeshSettingsValidator/
        
        # Copy all meta files
        find . -name "*.meta" -not -path "./UnityProject/*" -not -path "./.git/*" -not -path "./.github/*" | while read metafile; do
          relative_path="${metafile#./}"
          target_path="UnityProject/Assets/AvatarMeshSettingsValidator/$relative_path"
          mkdir -p "$(dirname "$target_path")"
          cp "$metafile" "$target_path" 2>/dev/null || true
        done
        
        # Create ProjectVersion.txt
        echo "m_EditorVersion: 2022.3.22f1" > UnityProject/ProjectSettings/ProjectVersion.txt
        
        # Create minimal ProjectSettings.asset
        cat > UnityProject/ProjectSettings/ProjectSettings.asset << 'EOL'
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!129 &1
PlayerSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 24
  productGUID: 00000000000000000000000000000000
  AndroidProfiler: 0
  AndroidFilterTouchesWhenObscured: 0
  AndroidEnableSustainedPerformanceMode: 0
  defaultScreenOrientation: 4
  targetDevice: 2
  useOnDemandResources: 0
  accelerometerFrequency: 60
  companyName: a1678991
  productName: AvatarMeshSettingsValidator
  defaultCursor: {fileID: 0}
  cursorHotspot: {x: 0, y: 0}
EOL
    
    - name: Export UnityPackage
      run: |
        # Get version
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${{ github.event.inputs.tag_name }}"
        fi
        
        # Create export script
        cat > UnityProject/Assets/ExportPackage.cs << 'EOL'
using UnityEngine;
using UnityEditor;
using System.IO;

public class PackageExporter
{
    [MenuItem("Tools/Export Package")]
    public static void ExportPackage()
    {
        string[] assetPaths = new string[] {
            "Assets/AvatarMeshSettingsValidator"
        };
        
        string version = System.Environment.GetEnvironmentVariable("PACKAGE_VERSION") ?? "v0.1.0";
        string packagePath = $"../Export/AvatarMeshSettingsValidator-{version}.unitypackage";
        
        // Ensure export directory exists
        Directory.CreateDirectory(Path.GetDirectoryName(packagePath));
        
        AssetDatabase.ExportPackage(assetPaths, packagePath, 
            ExportPackageOptions.Recurse | ExportPackageOptions.IncludeDependencies);
        
        Debug.Log($"Package exported to: {packagePath}");
        
        // Exit Unity
        EditorApplication.Exit(0);
    }
}
EOL
        
        # Run Unity to export the package
        PACKAGE_VERSION="$VERSION" xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \
          unity-editor \
          -projectPath "$(pwd)/UnityProject" \
          -batchmode \
          -nographics \
          -quit \
          -executeMethod PackageExporter.ExportPackage \
          -logFile export.log
        
        # Check if export was successful
        if [ ! -f "Export/AvatarMeshSettingsValidator-${VERSION}.unitypackage" ]; then
          echo "Export failed. Log contents:"
          cat export.log || true
          exit 1
        fi
        
        echo "Successfully exported package: AvatarMeshSettingsValidator-${VERSION}.unitypackage"
    
    - name: Upload UnityPackage artifact
      uses: actions/upload-artifact@v4
      with:
        name: unitypackage
        path: Export/*.unitypackage
        retention-days: 7
    
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: Export/*.unitypackage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}