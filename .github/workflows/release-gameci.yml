name: Build UnityPackage with GameCI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v0.1.0'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  build:
    name: Build UnityPackage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Cache Library
      uses: actions/cache@v4
      with:
        path: UnityProject/Library
        key: Library-${{ hashFiles('UnityProject/ProjectSettings/ProjectVersion.txt') }}
        restore-keys: |
          Library-
    
    - name: Prepare Unity project
      run: |
        # Create Unity project structure
        mkdir -p UnityProject/Assets/AvatarMeshSettingsValidator
        mkdir -p UnityProject/ProjectSettings
        
        # Copy package files
        cp -r Editor UnityProject/Assets/AvatarMeshSettingsValidator/
        cp -r Documentation UnityProject/Assets/AvatarMeshSettingsValidator/ 2>/dev/null || true
        cp README.md UnityProject/Assets/AvatarMeshSettingsValidator/
        cp CHANGELOG.md UnityProject/Assets/AvatarMeshSettingsValidator/
        cp LICENSE UnityProject/Assets/AvatarMeshSettingsValidator/
        cp package.json UnityProject/Assets/AvatarMeshSettingsValidator/
        
        # Copy all meta files
        find . -name "*.meta" -not -path "./UnityProject/*" -not -path "./.git/*" -not -path "./.github/*" | while read metafile; do
          relative_path="${metafile#./}"
          target_path="UnityProject/Assets/AvatarMeshSettingsValidator/$relative_path"
          mkdir -p "$(dirname "$target_path")"
          cp "$metafile" "$target_path" 2>/dev/null || true
        done
        
        # Create ProjectVersion.txt
        echo "m_EditorVersion: 2022.3.22f1" > UnityProject/ProjectSettings/ProjectVersion.txt
        
        # Create minimal ProjectSettings.asset
        cat > UnityProject/ProjectSettings/ProjectSettings.asset << 'EOL'
%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!129 &1
PlayerSettings:
  m_ObjectHideFlags: 0
  serializedVersion: 24
  productGUID: 00000000000000000000000000000000
  AndroidProfiler: 0
  AndroidFilterTouchesWhenObscurred: 0
  AndroidEnableSustainedPerformanceMode: 0
  defaultScreenOrientation: 4
  targetDevice: 2
  useOnDemandResources: 0
  accelerometerFrequency: 60
  companyName: a1678991
  productName: AvatarMeshSettingsValidator
  defaultCursor: {fileID: 0}
  cursorHotspot: {x: 0, y: 0}
EOL

        # Create export script in Unity project
        cat > UnityProject/Assets/ExportPackage.cs << 'EOL'
using UnityEngine;
using UnityEditor;
using System.IO;

public class PackageExporter
{
    public static void ExportPackage()
    {
        string[] assetPaths = new string[] {
            "Assets/AvatarMeshSettingsValidator"
        };
        
        string version = System.Environment.GetEnvironmentVariable("PACKAGE_VERSION") ?? "v0.1.0";
        string packagePath = Path.Combine(Directory.GetCurrentDirectory(), "..", "AvatarMeshSettingsValidator-" + version + ".unitypackage");
        
        Debug.Log($"Exporting package to: {packagePath}");
        
        AssetDatabase.ExportPackage(assetPaths, packagePath, 
            ExportPackageOptions.Recurse | ExportPackageOptions.IncludeDependencies);
        
        Debug.Log($"Package exported successfully to: {packagePath}");
        
        // Exit Unity
        EditorApplication.Exit(0);
    }
}
EOL
    
    - name: Build UnityPackage with GameCI
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        PACKAGE_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || github.event.inputs.tag_name }}
      with:
        projectPath: UnityProject
        unityVersion: 2022.3.22f1
        targetPlatform: StandaloneLinux64
        buildMethod: PackageExporter.ExportPackage
        customParameters: -quit
    
    - name: Get version for artifact naming
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${{ github.event.inputs.tag_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
    
    - name: Verify and rename UnityPackage
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        EXPECTED_FILE="AvatarMeshSettingsValidator-${VERSION}.unitypackage"
        
        # List all .unitypackage files for debugging
        echo "Looking for UnityPackage files:"
        find . -name "*.unitypackage" -type f
        
        # Check if the expected file exists
        if [ -f "$EXPECTED_FILE" ]; then
          echo "Found expected package: $EXPECTED_FILE"
          mkdir -p artifacts
          cp "$EXPECTED_FILE" "artifacts/"
        else
          echo "Expected package not found. Checking for any .unitypackage files..."
          FOUND_PACKAGE=$(find . -name "*.unitypackage" -type f | head -n 1)
          if [ -n "$FOUND_PACKAGE" ]; then
            echo "Found package at: $FOUND_PACKAGE"
            mkdir -p artifacts
            cp "$FOUND_PACKAGE" "artifacts/AvatarMeshSettingsValidator-${VERSION}.unitypackage"
          else
            echo "No UnityPackage file found! Build may have failed."
            exit 1
          fi
        fi
    
    - name: Upload UnityPackage artifact
      uses: actions/upload-artifact@v4
      with:
        name: unitypackage-${{ steps.version.outputs.version }}
        path: artifacts/*.unitypackage
        retention-days: 7
    
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*.unitypackage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}